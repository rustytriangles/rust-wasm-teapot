(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "../pkg/rust_wasm_teapot.js":
/*!**********************************!*\
  !*** ../pkg/rust_wasm_teapot.js ***!
  \**********************************/
/*! exports provided: Teapot, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rust_wasm_teapot_bg.wasm */ \"../pkg/rust_wasm_teapot_bg.wasm\");\n/* harmony import */ var _rust_wasm_teapot_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rust_wasm_teapot_bg.js */ \"../pkg/rust_wasm_teapot_bg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Teapot\", function() { return _rust_wasm_teapot_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"Teapot\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return _rust_wasm_teapot_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_throw\"]; });\n\n\n\n\n//# sourceURL=webpack:///../pkg/rust_wasm_teapot.js?");

/***/ }),

/***/ "../pkg/rust_wasm_teapot_bg.js":
/*!*************************************!*\
  !*** ../pkg/rust_wasm_teapot_bg.js ***!
  \*************************************/
/*! exports provided: Teapot, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Teapot\", function() { return Teapot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rust_wasm_teapot_bg.wasm */ \"../pkg/rust_wasm_teapot_bg.wasm\");\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n*/\nclass Teapot {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Teapot.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_teapot_free\"](ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    numVertices() {\n        var ret = _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"teapot_numVertices\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    numIndices() {\n        var ret = _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"teapot_numIndices\"](this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    vertices() {\n        var ret = _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"teapot_vertices\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    normals() {\n        var ret = _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"teapot_normals\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    indices() {\n        var ret = _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"teapot_indices\"](this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {Teapot}\n    */\n    static new() {\n        var ret = _rust_wasm_teapot_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"teapot_new\"]();\n        return Teapot.__wrap(ret);\n    }\n}\n\nconst __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../www/node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))\n\n//# sourceURL=webpack:///../pkg/rust_wasm_teapot_bg.js?");

/***/ }),

/***/ "../pkg/rust_wasm_teapot_bg.wasm":
/*!***************************************!*\
  !*** ../pkg/rust_wasm_teapot_bg.wasm ***!
  \***************************************/
/*! exports provided: memory, __wbg_teapot_free, teapot_numVertices, teapot_numIndices, teapot_vertices, teapot_normals, teapot_indices, teapot_new */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./rust_wasm_teapot_bg.js */ \"../pkg/rust_wasm_teapot_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/rust_wasm_teapot_bg.wasm?");

/***/ }),

/***/ "./graphics.js":
/*!*********************!*\
  !*** ./graphics.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// webglteapot Â© 2020 RustyTriangles LLC\n\nconst { mat3, mat4, quat, vec3 } = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/index.js\");\n\nvar shaderProgram = undefined;\nvar programInfo = undefined;\nvar geomBuffers = undefined;\nvar geomInfo = undefined;\n\nfunction checkErrors(gl, str) {\n\n    const e = gl.getError();\n    switch (e) {\n    case gl.NO_ERROR:\n        break;\n    case gl.INVALID_ENUM:\n        alert(str + ' - getError INVALID_ENUM');\n        break;\n    case gl.INVALID_VALUE:\n        alert(str + ' - getError INVALID_VALUE');\n        break;\n    case gl.INVALID_OPERATION:\n        alert(str + ' - getError INVALID_OPERATION');\n        break;\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n        alert(str + ' - getError INVALID_FRAMEBUFFER_OPERATION');\n        break;\n    case gl.OUT_OF_MEMORY:\n        alert(str + ' - getError OUT_OF_MEMORY');\n        break;\n    case gl.CONTEXT_LOST_WEBGL:\n        alert(str + ' - getError CONTEXT_LOST_WEBGL');\n        break;\n    default:\n        alert(str + ' - getError returned ' + e);\n        break;\n    }\n}\n\nfunction initShaders(gl) {\n    const vsSource =\n      'attribute vec4 aVertexPosition;' +\n      'attribute vec3 aVertexNormal;' +\n      'varying highp vec3 vDiffColor;' +\n      'varying highp vec3 vSpecColor;' +\n          'uniform mat4 uProjectionMatrix;' +\n          'uniform mat4 uModelViewMatrix;' +\n          'uniform mat3 uNormalMatrix;' +\n      'uniform vec3 uLightVec;' +\n          'void main() {' +\n      '    float ka = 0.15;' +\n      '    float kd = 0.8;' +\n      '    float ks = 0.75;' +\n      '    float specExp = 12.;' +\n      '    vec3 matColor = vec3(0.5, 0.25, 1);' +\n          '    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;' +\n      '    vec3 lightColor = vec3(1); ' +\n      '    vec3 eyeVec = normalize(uNormalMatrix * vec3(0,0,1));' +\n      '    float d = dot(aVertexNormal, uLightVec);' +\n      '    vDiffColor = min(vec3(ka) + vec3(kd)*max(vec3(d),vec3(0)), vec3(1)) * matColor;' +\n      '    vec3 halfVec = normalize(uLightVec - eyeVec);' +\n      '    float sd = dot(halfVec, aVertexNormal);' +\n      '    float p = ks * pow(max(sd,0.0),specExp);' +\n      '    vSpecColor = p * lightColor;' +\n      '}';\n\n    const fsSource =\n      'varying highp vec3 vDiffColor;' +\n      'varying highp vec3 vSpecColor;' +\n      'void main() {' +\n      '    gl_FragColor = vec4(min(vDiffColor+vSpecColor, vec3(1.0)), 1.0);' +\n      '}';\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        alert('Unable to initialize the shader program: ' +\n          gl.getProgramInfoLog(shaderProgram));\n        return null;\n    }\n\n    return shaderProgram;\n}\n\nfunction initBuffers(gl) {\n\n    const numVertices = geomInfo.vertices.length;\n\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER,\n                  geomInfo.vertices,\n                  gl.STATIC_DRAW);\n\n    const normalBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER,\n                  geomInfo.normals,\n          gl.STATIC_DRAW);\n\n    const numIndices = geomInfo.indices.length;\n\n    const indicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\n                  geomInfo.indices,\n                  gl.STATIC_DRAW);\n\n    return {\n        positionBuff: positionBuffer,\n        positionNumComponents: geomInfo.numComponents,\n        positionType: gl.FLOAT,\n        normalBuff: normalBuffer,\n        normalNumComponents: geomInfo.numComponents,\n        normalType: gl.FLOAT,\n        indicesBuff: indicesBuffer,\n        indicesType: gl.UNSIGNED_SHORT\n    };\n}\n\nfunction loadShader(gl, type, source) {\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        alert('An error occurred compiling the shaders: ' +\n          gl.getShaderInfoLog(shader));\n        gl.deleteShader(shader);\n        return null;\n    }\n\n    return shader;\n}\n\nfunction draw(gl, g, frameNumber) {\n\n    const ang1 = frameNumber * Math.PI / 49;\n    const ang2 = -frameNumber * Math.PI / 63;\n    const ang3 = -frameNumber * Math.PI / 105;\n\n    if (!shaderProgram) {\n        shaderProgram = initShaders(gl);\n    }\n\n    if (!programInfo) {\n        programInfo = {\n            program: shaderProgram,\n            attribLocations: {\n                vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\n                vertexNormal: gl.getAttribLocation(shaderProgram, 'aVertexNormal'),\n            },\n            uniformLocations: {\n                projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\n                modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\n                normalMatrix: gl.getUniformLocation(shaderProgram, 'uNormalMatrix'),\n                lightDirection: gl.getUniformLocation(shaderProgram, 'uLightVec'),\n            },\n        };\n\n        if (programInfo.uniformLocations.normalMatrix < 0) {\n            alert('Could not find normalMatrix location');\n            checkErrors(gl);\n        }\n\n        if (programInfo.uniformLocations.lightDirection < 0) {\n            alert('Could not find lightDirection location');\n            checkErrors(gl);\n        }\n    }\n\n    if (g != geomInfo) {\n        geomInfo = g;\n\n        if (geomBuffers) {\n            if (geomBuffers.positionBuff) {\n                gl.deleteBuffer(geomBuffers.positionBuff);\n            }\n            if (geomBuffers.normalBuff) {\n                gl.deleteBuffer(geomBuffers.normalBuff);\n            }\n            if (geomBuffers.indicesBuff) {\n                gl.deleteBuffer(geomBuffers.indicesBuff);\n            }\n            geomBuffers = undefined;\n        }\n    }\n\n    if (!geomBuffers) {\n        geomBuffers = initBuffers(gl);\n    }\n\n    gl.clearColor(0.25,0.25,0.25,1);\n    gl.clearDepth(1.0);\n    gl.enable(gl.DEPTH_TEST);\n    gl.depthFunc(gl.LEQUAL);\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    const fieldOfView = 35 * Math.PI / 180;\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    const zNear = 0.1;\n    const zFar = 100.0;\n    const projectionMatrix = mat4.create();\n    mat4.perspective(projectionMatrix,\n                     fieldOfView,\n                     aspect,\n                     zNear,\n                     zFar);\n\n    const modelViewMatrix = mat4.create();\n    mat4.translate(modelViewMatrix, modelViewMatrix, [-0.0, -1.0, -9.0]);\n    mat4.rotate(modelViewMatrix, modelViewMatrix, ang1, [0.0, 1.0, 0.0]);\n    mat4.rotate(modelViewMatrix, modelViewMatrix, ang2, [1.0, 0.0, 0.0]);\n\n    let q = quat.create();\n    quat.setAxisAngle(q, [0.866*0.7071, 0.7071, 0.5*0.7071], ang3);\n    let lightDir = vec3.fromValues(-1,0,0);\n    vec3.transformQuat(lightDir, lightDir, q);\n\n    const normalMatrix = mat3.create();\n    mat3.fromMat4(normalMatrix, modelViewMatrix);\n    mat3.invert(normalMatrix, normalMatrix);\n\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, geomBuffers.positionBuff);\n    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition,\n                           geomBuffers.positionNumComponents,\n                           geomBuffers.positionType,\n                           normalize,\n                           stride,\n                           offset);\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, geomBuffers.normalBuff);\n    gl.vertexAttribPointer(programInfo.attribLocations.vertexNormal,\n                           geomBuffers.normalNumComponents,\n                           geomBuffers.normalType,\n                           normalize,\n                           stride,\n                           offset);\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexNormal);\n\n    gl.useProgram(programInfo.program);\n\n    gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix,\n                        false,\n                        projectionMatrix);\n    gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix,\n                        false,\n                        modelViewMatrix);\n    gl.uniformMatrix3fv(programInfo.uniformLocations.normalMatrix,\n                        false,\n                        normalMatrix);\n    gl.uniform3fv(programInfo.uniformLocations.lightDirection,\n                     lightDir);\n    const numTriangles = geomInfo.numTriangles;\n    gl.drawElements(gl.TRIANGLES, 3*numTriangles, geomBuffers.indicesType, 0);\n\n    checkErrors(gl, 'after drawElements');\n}\n\nmodule.exports = { draw };\n\n\n//# sourceURL=webpack:///./graphics.js?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var rust_wasm_teapot__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rust-wasm-teapot */ \"../pkg/rust_wasm_teapot.js\");\n/* harmony import */ var rust_wasm_teapot_rust_wasm_teapot_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rust-wasm-teapot/rust_wasm_teapot_bg */ \"../pkg/rust_wasm_teapot_bg.wasm\");\n\n\n\nvar gmod = __webpack_require__(/*! ./graphics */ \"./graphics.js\");\n\nconst canvas = document.getElementById(\"canvas\");\ncanvas.width = 640;\ncanvas.height = 480;\n\nconst teapot = rust_wasm_teapot__WEBPACK_IMPORTED_MODULE_0__[\"Teapot\"].new();\nlet geomInfo = undefined;\n\nvar frameCounter = 0;\n\nconst renderLoop = () => {\n    const rect = canvas.getBoundingClientRect();\n    const gl = canvas.getContext('webgl2');\n\tif (!gl) {\n\t    console.log('Could not create context');\n\t    return;\n\t}\n\n    if (!geomInfo) {\n        const numVertices = teapot.numVertices();\n        const vertex_data = teapot.vertices();\n        const normal_data = teapot.normals();\n        const vertices = new Float32Array(rust_wasm_teapot_rust_wasm_teapot_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer,\n                                          vertex_data,\n                                          3 * numVertices);\n        const normals = new Float32Array(rust_wasm_teapot_rust_wasm_teapot_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer,\n                                         normal_data,\n                                         3 * numVertices);\n        const numIndices = teapot.numIndices();\n        const index_data = teapot.indices();\n        const indices = new Int16Array(rust_wasm_teapot_rust_wasm_teapot_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer,\n                                       index_data,\n                                       numIndices);\n\n        geomInfo = {\n            vertices: vertices,\n            numComponents: 3,\n            numVertices: vertices.length/3,\n            normals: normals,\n            indices: indices,\n            numTriangles: indices.length / 3\n        };\n    }\n\n\tgmod.draw(gl, geomInfo, frameCounter);\n    frameCounter += 1;\n\n    requestAnimationFrame(renderLoop);\n};\n\nrequestAnimationFrame(renderLoop);\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);